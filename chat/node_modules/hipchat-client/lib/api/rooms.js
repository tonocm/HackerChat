// Generated by CoffeeScript 1.7.1
(function() {
  var BaseClass, Rooms,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseClass = require('./common/base_class');

  Rooms = (function(_super) {
    __extends(Rooms, _super);

    function Rooms() {
      return Rooms.__super__.constructor.apply(this, arguments);
    }

    Rooms.prototype.endpoints = {
      create: '/v1/rooms/create',
      "delete": '/v1/rooms/delete',
      history: '/v1/rooms/history',
      list: '/v1/rooms/list',
      message: '/v1/rooms/message',
      show: '/v1/rooms/show',
      topic: '/v1/rooms/topic'
    };

    Rooms.prototype.create = function(opts, callback) {
      if (opts == null) {
        opts = {};
      }
      this.validate.obj(opts, ['name', 'owner_user_id']);
      return this.request('POST', this.endpoints.create, opts, callback);
    };

    Rooms.prototype["delete"] = function(opts, callback) {
      if (opts == null) {
        opts = {};
      }
      this.validate.obj(opts, ['room_id']);
      return this.request('POST', this.endpoints["delete"], opts, callback);
    };

    Rooms.prototype.history = function(opts, callback) {
      if (opts == null) {
        opts = {};
      }
      this.validate.obj(opts, ['room_id', 'date']);
      return this.request('GET', this.endpoints.history, opts, callback);
    };

    Rooms.prototype.list = function(opts, callback) {
      if (opts == null) {
        opts = {};
      }
      return this.request('GET', this.endpoints.list, opts, callback);
    };

    Rooms.prototype.message = function(opts, callback) {
      if (opts == null) {
        opts = {};
      }
      this.validate.obj(opts, ['room_id', 'from', 'message']);
      return this.request('POST', this.endpoints.message, opts, callback);
    };

    Rooms.prototype.show = function(opts, callback) {
      if (opts == null) {
        opts = {};
      }
      this.validate.obj(opts, ['room_id']);
      return this.request('GET', this.endpoints.show, opts, callback);
    };

    Rooms.prototype.topic = function(opts, callback) {
      if (opts == null) {
        opts = {};
      }
      this.validate.obj(opts, ['room_id', 'topic']);
      return this.request('POST', this.endpoints.topic, opts, callback);
    };

    Rooms.prototype.getByName = function(name, opts, callback) {
      if (name == null) {
        name = '';
      }
      if (opts == null) {
        opts = {};
      }
      this.validate.str(name);
      return this.list(opts, (function(_this) {
        return function(err, res) {
          if (err) {
            callback(err);
          }
          return callback(null, {
            room: _this.select(res.rooms, {
              name: name
            })
          });
        };
      })(this));
    };

    Rooms.prototype.getByXmppJid = function(xmpp_jid, opts, callback) {
      if (xmpp_jid == null) {
        xmpp_jid = '';
      }
      if (opts == null) {
        opts = {};
      }
      this.validate.str(xmpp_jid);
      return this.list(opts, (function(_this) {
        return function(err, res) {
          if (err) {
            callback(err);
          }
          return callback(null, {
            room: _this.select(res.rooms, {
              xmpp_jid: xmpp_jid
            })
          });
        };
      })(this));
    };

    return Rooms;

  })(BaseClass);

  module.exports = Rooms;

}).call(this);
