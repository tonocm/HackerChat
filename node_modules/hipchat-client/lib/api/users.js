// Generated by CoffeeScript 1.7.1
(function() {
  var BaseClass, Users,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseClass = require('./common/base_class');

  Users = (function(_super) {
    __extends(Users, _super);

    function Users() {
      return Users.__super__.constructor.apply(this, arguments);
    }

    Users.prototype.endpoints = {
      create: '/v1/users/create',
      "delete": '/v1/users/delete',
      list: '/v1/users/list',
      show: '/v1/users/show',
      undelete: '/v1/users/undelete',
      update: '/v1/users/update'
    };

    Users.prototype.create = function(opts, callback) {
      if (opts == null) {
        opts = {};
      }
      this.validate.obj(opts, ['email', 'name']);
      return this.request('POST', this.endpoints.create, opts, callback);
    };

    Users.prototype["delete"] = function(opts, callback) {
      if (opts == null) {
        opts = {};
      }
      this.validate.obj(opts, ['user_id']);
      return this.request('POST', this.endpoints["delete"], opts, callback);
    };

    Users.prototype.list = function(opts, callback) {
      if (opts == null) {
        opts = {};
      }
      return this.request('GET', this.endpoints.list, opts, callback);
    };

    Users.prototype.show = function(opts, callback) {
      if (opts == null) {
        opts = {};
      }
      this.validate.obj(opts, ['user_id']);
      return this.request('GET', this.endpoints.show, opts, callback);
    };

    Users.prototype.undelete = function(opts, callback) {
      if (opts == null) {
        opts = {};
      }
      this.validate.obj(opts, ['user_id']);
      return this.request('POST', this.endpoints.undelete, opts, callback);
    };

    Users.prototype.update = function(opts, callback) {
      if (opts == null) {
        opts = {};
      }
      this.validate.obj(opts, ['user_id']);
      return this.request('POST', this.endpoints.update, opts, callback);
    };

    Users.prototype.getByMentionName = function(mention_name, opts, callback) {
      if (mention_name == null) {
        mention_name = '';
      }
      if (opts == null) {
        opts = {};
      }
      this.validate.str(mention_name);
      return this.list(opts, (function(_this) {
        return function(err, res) {
          if (err) {
            callback(err);
          }
          return callback(null, {
            user: _this.select(res.users, {
              mention_name: mention_name
            })
          });
        };
      })(this));
    };

    Users.prototype.getByName = function(name, opts, callback) {
      if (name == null) {
        name = '';
      }
      if (opts == null) {
        opts = {};
      }
      this.validate.str(name);
      return this.list(opts, (function(_this) {
        return function(err, res) {
          if (err) {
            callback(err);
          }
          return callback(null, {
            user: _this.select(res.users, {
              name: name
            })
          });
        };
      })(this));
    };

    Users.prototype.getByEmail = function(email, opts, callback) {
      if (email == null) {
        email = '';
      }
      if (opts == null) {
        opts = {};
      }
      this.validate.str(email);
      return this.list(opts, (function(_this) {
        return function(err, res) {
          if (err) {
            callback(err);
          }
          return callback(null, {
            user: _this.select(res.users, {
              email: email
            })
          });
        };
      })(this));
    };

    Users.prototype.getByStatus = function(status, opts, callback) {
      if (status == null) {
        status = '';
      }
      if (opts == null) {
        opts = {};
      }
      this.validate.inclusion(status, ['available', 'dnd', 'away', 'offline']);
      return this.list(opts, (function(_this) {
        return function(err, res) {
          if (err) {
            callback(err);
          }
          return callback(null, {
            users: _this.select(res.users, {
              status: status
            }, 'all')
          });
        };
      })(this));
    };

    return Users;

  })(BaseClass);

  module.exports = Users;

}).call(this);
