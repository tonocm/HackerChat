// Generated by CoffeeScript 1.7.1
(function() {
  var BaseClass, request,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  request = require('superagent');

  BaseClass = (function() {
    function BaseClass(hipchat) {
      this.hipchat = hipchat;
    }

    BaseClass.prototype.throwError = function(error) {
      error = error.error;
      return new Error("" + error.code + " (" + error.type + ") - " + error.message);
    };

    BaseClass.prototype.request = function(method, url, params, callback) {
      var xhr;
      if (method == null) {
        method = 'GET';
      }
      if (url == null) {
        url = '';
      }
      if (params == null) {
        params = {};
      }
      params.auth_token = this.hipchat.apiKey;
      xhr = request[method.toLowerCase()]("" + this.hipchat.host + url);
      if (method === 'POST') {
        xhr.type('form');
        xhr.send(params);
      } else {
        xhr.query(params);
      }
      return xhr.end((function(_this) {
        return function(err, res) {
          if (err) {
            throw err;
          }
          if (res.ok) {
            return callback(null, res.body);
          } else {
            return callback(_this.throwError(res.body));
          }
        };
      })(this));
    };

    BaseClass.prototype.validate = {
      obj: function(options, validation) {
        if (options == null) {
          options = {};
        }
        if (validation == null) {
          validation = [];
        }
        validation.forEach(function(value) {
          if (!options[value]) {
            throw new Error("Missing " + value + " parameter.");
          }
        });
        return true;
      },
      str: function(param) {
        if (param == null) {
          param = '';
        }
        if (!param) {
          throw new Error("Missing parameter.");
        }
        return true;
      },
      inclusion: function(param, possibilities) {
        if (param == null) {
          param = '';
        }
        if (__indexOf.call(possibilities, param) < 0) {
          throw new Error("" + param + " isn't a possibility (" + possibilities + ")");
        }
        return true;
      }
    };

    BaseClass.prototype.select = function(collection, param, type) {
      var item, property, selected;
      if (collection == null) {
        collection = [];
      }
      if (param == null) {
        param = {};
      }
      if (type == null) {
        type = 'one';
      }
      this.validate.str(type, ['one', 'all']);
      property = Object.keys(param)[0];
      selected = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = collection.length; _i < _len; _i++) {
          item = collection[_i];
          if (item[property] === param[property]) {
            _results.push(item);
          }
        }
        return _results;
      })();
      if (selected.length) {
        if (type === 'one') {
          return selected[0];
        }
        if (type === 'all') {
          return selected;
        }
      } else {
        return {};
      }
    };

    return BaseClass;

  })();

  module.exports = BaseClass;

}).call(this);
